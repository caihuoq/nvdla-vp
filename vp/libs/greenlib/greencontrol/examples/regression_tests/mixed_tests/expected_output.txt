
Warning: IP1.__gcnf_api___0: DEPRECATED: addParam is deprecated due to simulation overhead! Use 'setInitValue("par_name", "value")' instead or create a gs_param<type> object.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:524

Warning: IP1.__gcnf_api___0: DEPRECATED: addParam is deprecated due to simulation overhead! Use 'setInitValue("par_name", "value")' instead or create a gs_param<type> object.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:524

Warning: IP1.SUB_IP_2.__gcnf_api___0: DEPRECATED: addParam is deprecated due to simulation overhead! Use 'setInitValue("par_name", "value")' instead or create a gs_param<type> object.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:524

Warning: IP1.SUB_IP_2.__gcnf_api___0: DEPRECATED: addParam is deprecated due to simulation overhead! Use 'setInitValue("par_name", "value")' instead or create a gs_param<type> object.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:524

Warning: IP1.SUB_IP_2.__gcnf_api___0: DEPRECATED: addParam is deprecated due to simulation overhead! Use 'setInitValue("par_name", "value")' instead or create a gs_param<type> object.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:524

Warning: IP1.SUB_IP_2.__gcnf_api___0: DEPRECATED: addParam is deprecated due to simulation overhead! Use 'setInitValue("par_name", "value")' instead or create a gs_param<type> object.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:524

Warning: IP1.SUB_IP_2.__gcnf_api___0: DEPRECATED: addParam is deprecated due to simulation overhead! Use 'setInitValue("par_name", "value")' instead or create a gs_param<type> object.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:524

Warning: IP2.__gcnf_api___0: DEPRECATED: addParam is deprecated due to simulation overhead! Use 'setInitValue("par_name", "value")' instead or create a gs_param<type> object.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:524

Warning: IP2.__gcnf_api___0: DEPRECATED: addParam is deprecated due to simulation overhead! Use 'setInitValue("par_name", "value")' instead or create a gs_param<type> object.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:524

Warning: IP2.__gcnf_api___0: DEPRECATED: addParam is deprecated due to simulation overhead! Use 'setInitValue("par_name", "value")' instead or create a gs_param<type> object.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:524

Warning: IP2.__gcnf_api___0: DEPRECATED: addParam is deprecated due to simulation overhead! Use 'setInitValue("par_name", "value")' instead or create a gs_param<type> object.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:524

Warning: IP2.__gcnf_api___0: DEPRECATED: addParam is deprecated due to simulation overhead! Use 'setInitValue("par_name", "value")' instead or create a gs_param<type> object.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:524

Info: (I804) /IEEE_Std_1666/deprecated: sc_bit is deprecated, use bool instead

Warning: gs_param<sc_bit>: DEPRECATED: sc_bit is deprecated use bool instead.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/gs_param/gs_param_systemc.hpp:636

Warning: gs_param<sc_bit>: DEPRECATED: sc_bit is deprecated use bool instead.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/gs_param/gs_param_systemc.hpp:636
IP1.scmlIntParam=1000
.
.
.
.
.
.


** Test top-level parameters **
create top-level parameter 'Toplevel_Param_Tests'
create top-level parameter 'toplevel.sub.topLevelParam2'

Warning: __gcnf_api___0: DEPRECATED: addParam is deprecated due to simulation overhead! Use 'setInitValue("par_name", "value")' instead or create a gs_param<type> object.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:524

Info: __gcnf_api___0: Parameter names should be hierarchical names (expect this is a top-level parameter)!

Warning: __gcnf_api___0: DEPRECATED: setParam is deprecated due to simulation overhead! Use 'getPar("par_name") = value' or 'setInitValue("par_name", "init_value")' instead.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:650

Warning: __gcnf_api___0: DEPRECATED: getParam is deprecated due to simulation overhead! Use 'value = getPar("par_name")' or 'getPar(...)->getValue()' or 'getPar(...)->getString()' instead.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:733
value of Toplevel_Param_Tests should be 40 == 40
existsPar test passed
existsPar test passed
existsPar test passed

Warning: __gcnf_api___0: DEPRECATED: getUpdateEvent is deprecated! Use 'my_param.getUpdateEvent()' or use callback 'REGISTER_PARAM_CALLBACK(&my_param, class, method)' instead.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:1017

Warning: __gcnf_api___0: DEPRECATED: registerCallback (and macro REGISTER_CALLBACK) is deprecated due to simulation overhead! Use 'REGISTER_PARAM_CALLBACK(&my_param, class, method)' instead.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:1094

** Test top-level parameters passed if no errors **

ConfigFile_Api: Applying value of param 'IP2.anotherTabImplParam4' to 'config file created with tab'
ConfigFile_Api: Applying value of param 'IP2.anotherTabImplicParam2' to '43'
ConfigFile_Api: Applying value of param 'IP2.anotherTabImplicParam3' to '44'
ConfigFile_Api: Applying value of param 'IP2.anotherTabImplicitParam1' to '42'
ConfigFile_Api: Applying value of param 'IP2.implicitParam' to '400'
ConfigFile_Api: Applying value of param 'IP2.scmlBoolParam' to '1'
ConfigFile_Api: Applying value of param 'IP2.scmlDoubleParam' to '4444.5'
ConfigFile_Api: Applying value of param 'IP2.scmlIntParam' to '55555'
ConfigFile_Api: Applying value of param 'IP2.scmlStringParam' to 'HelloFile'
@0 s /0 (TestTool): config_callback: Callback for changed parameter IP2.scmlStringParam. New value: HelloFile
@0 s /0 (TestTool): config_callback2: Callback for changed parameter IP2.scmlStringParam. New value: HelloFile
ConfigFile_Api: Applying value of param 'IP2.zw.implicitFirstParam' to '333'
ConfigFile_Api: Applying value of param 'IP3.char_param1' to ''A''

Warning: deserialize: A 'char' parameter gets numbers assigned. Note that the behavior is not specified by the C standard, use 'signed char' or 'unsigned char' instead!
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/gs_param/gs_param_native.hpp:1190
ConfigFile_Api: Applying value of param 'IP3.time_param1' to '52 SC_MS'
ConfigFile_Api: Applying value of param 'IP3.time_param2' to '5 s'
ConfigFile_Api: Applying value of param 'IP3.uchar_param' to ''D''
ConfigFile_Api: Applying value of param 'IP1.SUB_IP_2.scmlStringParam' to 'with "quotes" inside'
ConfigFile_Api: Applying value of param 'IP1.SUB_IP_2.scmlUIntParam' to '123456'
ConfigFile_Api: Applying value of param 'IP1.implicitParam' to 'examleImplValue'
ConfigFile_Api: Applying value of param 'IP1.scmlIntParam' to '1234'
ConfigFile_Api: Applying value of param 'IPVec.vec1' to '{ "without", "quotes" }'
ConfigFile_Api: Applying value of param 'IPVec.vec2' to '{ "with spaces", "within members" }'
ConfigFile_Api: Applying value of param 'IPVec.vec3' to '{ "with single quotes", "within 'this' member", "and comma, here" }'
ConfigFile_Api: Applying value of param 'IPVec.vec4' to '{ "without", "quotes" }'
ConfigFile_Api: Applying value of param 'IPVec.vec5' to '{ "with", "quotes in \"this\"." }'
ConfigFile_Api: Applying value of param 'ConfigFileMacroIP.param1' to '101'
ConfigFile_Api: Applying value of param 'ConfigFileMacroIP.param2' to '101'
ConfigFile_Api: Applying value of param 'ConfigFileMacroIP.param3' to '101'
ConfigFile_Api: Applying value of param 'ConfigFileMacroIP.param4' to '101'
#0: ./testbench.x

Info: CommandLine_Tool: ACTIVATE_COMMAND_THREAD is not defined! The command line Thread will not be started!

ConfigFileMacroMod has been configured with these params:
   param1 = 101
   param2 = 101
   param3 = 101
   param4 = 101
.
@0 s /0 (IP1.SUB_IP_2): This is the main action in TestIP
.
.
@0 s /0 (IP2): This is the main action in TestIP
IP3 test: register new param event and callback

Warning: GCnf_Api: DEPRECATED: The getNewParamEvent function is deprecated due to performance reasons! Register a callback instead using mApi.REGISTER_NEW_PARAM_CALLBACK(class_name, callback_function);
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:1138
In process: IP3.main_action @ 0 s
TestIP3::new_param_callback: Callback for NEW PARAMETERS: Parameter IP3.Test.newParam, value: TestParam should result in new param callback
TestIP3::new_param_callback: Callback for NEW PARAMETERS: Parameter IP3.local_int, value: 50
IP3 test: local_int = 50
IP3 test: local_int += 100: 150
IP3 test:  int_param =0
IP3 test:  str_param =50
IP3 test:  str_param2=
IP3 test: uint_param =0
IP3 test: uint_param2=333
IP3 test: bool_param =0
IP3 test:  dbl_param =0

IP3 test: 'uint_param = (unsigned int) 1000' uint_param=1000
IP3 test: 'int_param = 500 - uint_param' : int_param=-500
IP3 test: 'int_param += 1500' : int_param=1000
IP3 test: int_param++=1000
IP3 test: int_param=1001
IP3 test: ++int_param=1002
IP3 test: int_param=1002
IP3 test: int_param--=1002
IP3 test: int_param=1001
IP3 test: --int_param=1000
IP3 test: int_param=1000

IP3 test: 'int_param += 1500' : int_param=2500
IP3 test: 'int_param -= 200' : int_param=2300
IP3 test: 'int_param /= 4' : int_param=575
IP3 test: 'int_param *= 3' : int_param=1725
IP3 test: 'int_param %= 6' : int_param=3
IP3 test: 'int_param ^= 5' : int_param=6
IP3 test: 'int_param &= 60' : int_param=4
IP3 test: 'int_param |= 3' : int_param=7
IP3 test: 'int_param <<= 2' : int_param (28) =28
IP3 test: 'int_param >>= 2' : int_param (7) =7

IP3 test: 'int_param != 6' 
               true
IP3 test: 'int_param != 4' 
               true


IP3 test: 'uint_param = (unsigned int) 1000' uint_param=1000
IP3 test: 'uint_param = 3200 - uint_param' : uint_param=2200
IP3 test: 'uint_param += 1500' : uint_param=3700
IP3 test: uint_param++=3700
IP3 test: uint_param=3701
IP3 test: ++uint_param=3702
IP3 test: uint_param=3702
IP3 test: uint_param--=3702
IP3 test: uint_param=3701
IP3 test: --uint_param=3700
IP3 test: uint_param=3700

IP3 test: 'uint_param += 1500' : uint_param=5200
IP3 test: 'uint_param -= 200' : uint_param=5000
IP3 test: 'uint_param /= 4' : uint_param=1250
IP3 test: 'uint_param *= 3' : uint_param=3750
IP3 test: 'uint_param %= 6' : uint_param=0
IP3 test: 'uint_param ^= 5' : uint_param=5
IP3 test: 'uint_param &= 60' : uint_param=4
IP3 test: 'uint_param |= 3' : uint_param=7
IP3 test: 'uint_param <<= 2' : uint_param (28) =28
IP3 test: 'uint_param >>= 2' : uint_param (7) =7

IP3 test: 'uint_param != 7' 
               false
IP3 test: 'uint_param != 4' 
               true


IP3 test: 'ushort_param = (unsigned short) 100' ushort_param=100
IP3 test: 'ushort_param = 320 - ushort_param' : ushort_param=220
IP3 test: 'ushort_param += 15' : ushort_param=235
IP3 test: ushort_param++=235
IP3 test: ushort_param=236
IP3 test: ++ushort_param=237
IP3 test: ushort_param=237
IP3 test: ushort_param--=237
IP3 test: ushort_param=236
IP3 test: --ushort_param=235
IP3 test: ushort_param=235

IP3 test: 'uint_param += 15' : ushort_param=250
IP3 test: 'ushort_param -= 30' : ushort_param=220
IP3 test: 'ushort_param /= 4' : ushort_param=55
IP3 test: 'ushort_param *= 3' : ushort_param=165
IP3 test: 'ushort_param %= 6' : ushort_param=3
IP3 test: 'ushort_param ^= 5' : ushort_param=6
IP3 test: 'ushort_param &= 60' : ushort_param=4
IP3 test: 'ushort_param |= 3' : ushort_param=7
IP3 test: 'ushort_param <<= 2' : ushort_param (28) =28
IP3 test: 'ushort_param >>= 2' : ushort_param (7) =7

IP3 test: 'ushort_param != 7' 
               false
IP3 test: 'ushort_param != 4' 
               true


IP3 test: 'short_param = (short) 100' short_param=100
IP3 test: 'short_param = 20 - short_param' : short_param=-80
IP3 test: 'short_param += 315' : short_param=235
IP3 test: short_param++=235
IP3 test: short_param=236
IP3 test: ++short_param=237
IP3 test: short_param=237
IP3 test: short_param--=237
IP3 test: short_param=236
IP3 test: --short_param=235
IP3 test: short_param=235

IP3 test: 'uint_param += 15' : short_param=250
IP3 test: 'short_param -= 30' : short_param=220
IP3 test: 'short_param /= 4' : short_param=55
IP3 test: 'short_param *= 3' : short_param=165
IP3 test: 'short_param %= 6' : short_param=3
IP3 test: 'short_param ^= 5' : short_param=6
IP3 test: 'short_param &= 60' : short_param=4
IP3 test: 'short_param |= 3' : short_param=7
IP3 test: 'short_param <<= 2' : short_param (28) =28
IP3 test: 'short_param >>= 2' : short_param (7) =7

IP3 test: 'short_param != 7' 
               false
IP3 test: 'short_param != 4' 
               true


IP3 test: bool_param=0
IP3 test: 'bool_param = true' bool_param=1
IP3 test: 'bool_param = 500 - ubool_param' : bool_param=1
IP3 test: bool_param++=1
IP3 test: bool_param=1
IP3 test: ++bool_param=1
IP3 test: bool_param=1

IP3 test: bool_param=1
IP3 test: 'bool_param != true' 
               false
IP3 test: 'bool_param != false' 
               true


IP3 test: 'udbl_param = 10.1' dbl_param=10.1
IP3 test: 'dbl_param = 500.2 - dbl_param' : dbl_param=490.1
IP3 test: 'dbl_param += 1.05' : dbl_param=491.15
IP3 test: dbl_param++=491.15
IP3 test: dbl_param=492.15
IP3 test: ++dbl_param=493.15
IP3 test: dbl_param=493.15
IP3 test: dbl_param--=493.15
IP3 test: dbl_param=492.15
IP3 test: --dbl_param=491.15
IP3 test: dbl_param=491.15

IP3 test: 'dbl_param += 9.2' : dbl_param=500.35
IP3 test: 'dbl_param -= 100.8' : dbl_param=399.55
IP3 test: 'dbl_param /= 4.1' : dbl_param=97.4512
IP3 test: 'dbl_param *= 3.2' : dbl_param=311.844

IP3 test: 'dbl_param != 311.844' 
               true
IP3 test: 'dbl_param != 4.5' 
               true


IP3 test: 'float_param = 10.1' float_param=10.1
IP3 test: 'float_param = 500.2 - float_param' : float_param=490.1
IP3 test: 'float_param += 1.05' : float_param=491.15
IP3 test: float_param++=491.15
IP3 test: float_param=492.15
IP3 test: ++float_param=493.15
IP3 test: float_param=493.15
IP3 test: float_param--=493.15
IP3 test: float_param=492.15
IP3 test: --float_param=491.15
IP3 test: float_param=491.15

IP3 test: 'float_param += 9.2' : float_param=500.35
IP3 test: 'float_param -= 100.8' : float_param=399.55
IP3 test: 'float_param /= 4.1' : float_param=97.4512
IP3 test: 'float_param *= 3.2' : float_param=311.844

IP3 test: float_b = 44.4
IP3 test: 'float_b != 44.4' 
               true
IP3 test: 'float_b != (float) 44.4' 
               false

IP3 test: 'float_param != 311.844' 
               true
IP3 test: 'float_param != (float) 311.844' 
               true
IP3 test: 'float_param != 4.5' 
               true
IP3 test: 'float_param = 19.3' : float_param=19.3
IP3 test: 'float_param = dbl_param (311.844) + 4.1' : float_param=315.944


IP3 test: 'str_param2 = str_param' str_param2=50
IP3 test: 'str_param = "1000"' str_param=1000

IP3 test: 'str_param != "1000"' 
               false
IP3 test: 'str_param == "1000"' 
               true
IP3 test: 'str_param != "test"' 
               true
IP3 test: 'str_param < "Hallo"' 
               true
IP3 test: str_param < str_param2
               true
IP3 test: "Hallo" < str_param 
               false

IP3 test: 'str_param > "Hallo"' 
               false
IP3 test: 'str_param <= "Hallo"' 
               true
IP3 test: 'str_param >= "Hallo"' 
               false

IP3 test: str_param = 'Hello '
IP3 test: str_param2 = 'it's me'
IP3 test: 'str_param = str_param + str_param2' = 'Hello it's me'
IP3 test: 'str_param = str_param + " after"' = 'Hello it's me after'
IP3 test: 'str_param = "before " + str_param' = 'before Hello it's me after'

IP3 test: 'ss << str_param: ss = 'before Hello it's me after'
IP3 test: 'ss >> str_param2: str_param2 ('before')= 'before'



i    = 7,  
str  = 'before Hello it's me after',  
str2 = 'before',  
unsi = 7,  
bo   = 1,  
db   = 311.844
fl   = 315.944
TestIP3::config_callback: Callback for changed parameter IP3.int_param. New value: 44


IP3 test: sc_int_param = 12
IP3 test: sc_int_param = (sc_int<8>) 100 = 100
IP3 test: i = (sc_int_param = -66) = -66

IP3 test: sc_uint_param = 1200
IP3 test: sc_uint_param = 1001 = 1001
IP3 test: ui = (sc_uint_param = 66) = 66

IP3 test: sc_bigint_param = 99
IP3 test: sc_bigint_param = (sc_bigint<70>) 12457878787812LL = 12457878787812
IP3 test: ib = (sc_bigint_param = -660000000000LL) = -660000000000

IP3 test: sc_biguint_param = 9999
IP3 test: sc_biguint_param = (sc_biguint<70>) 324578787878ULL = 324578787878
IP3 test: uib = (sc_biguint_param = 440000000000000LL) = 440000000000000

IP3 test: sc_bit_param2 = 1
IP3 test: b3 = 1
IP3 test: b = 1
IP3 test: b1 = 1
IP3 test: sc_bit_param = 1
IP3 test: sc_bit_param = SC_LOGIC_0 = 0
               SC_LOGIC_0
IP3 test: sc_bit_param = SC_LOGIC_1 = 1
IP3 test: bv = 100
IP3 test: bv1 = 101
IP3 test: sc_bv_param = 100
TestIP3::new_param_callback: Callback for NEW PARAMETERS: Parameter IP3.sc_fixed_param, value: 33.399993896484375
TestIP3::new_param_callback: Callback for NEW PARAMETERS: Parameter IP3.sc_ufixed_param, value: 33.399993896484375
TestIP3::new_param_callback: Callback for NEW PARAMETERS: Parameter IP3.sc_fix_param, value: 33
TestIP3::new_param_callback: Callback for NEW PARAMETERS: Parameter IP3.sc_ufix_param, value: 33

IP3 test: time_param1 = 52 ms  = 52 ms. Value changed from configtest.cfg

IP3 test: time_param1 = 500 ns = 52 ms?. Value set in constructor

IP3 test: time_param2 = 2 s = 2 s
IP3 test: deserialize -> serialize -> deserialize test: '53.98 us'
IP3 test: result: 53980 ns
IP3 test: result: 53980 ns
IP3 test: sc_time large: 17823328023386666602 ps

IP3 test: time_param1 huge number: 17823328023386666602 ps

IP3 test: time_param2 huge number: 9223372036854775808 ps



TestIP3::new_param_callback: Callback for NEW PARAMETERS: Parameter IP3.ull_par, value: 10
IP3 test: unsigned long long param (orig=18446744073709551615) = 18446744073709551615 = 18446744073709551615
IP3 test: unsigned long long param (orig=18446744073709489935) = 18446744073709489935 = 18446744073709489935
IP3 test: unsigned long long param (orig=17365880163140570895) = 17365880163140570895 = 17365880163140570895
TestIP3::new_param_callback: Callback for NEW PARAMETERS: Parameter IP3.ull2_par, value: 17365880163140570895
TestIP3::new_param_callback: Callback for NEW PARAMETERS: Parameter IP3.ull3_par, value: 10
TestIP3::new_param_callback: Callback for NEW PARAMETERS: Parameter IP3.ull4_par, value: 7
TestIP3::new_param_callback: Callback for NEW PARAMETERS: Parameter IP3.ul1_par, value: 10
TestIP3::new_param_callback: Callback for NEW PARAMETERS: Parameter IP3.ul2_par, value: 11


TestIP3::new_param_callback: Callback for NEW PARAMETERS: Parameter IP3.ll_par, value: 100
IP3 test: long long param (orig=-1) = -1 = -1
IP3 test: long long param (orig=-61681) = -61681 = -61681
IP3 test: long long param (orig=-1080863910568980721) = -1080863910568980721 = -1080863910568980721


IP3 test: 'uchar_param = 'G'' : uchar_param = G
IP3 test: 'uchar_param = 78' (='N') : uchar_param = N
IP3 test: 'char_param1.setString("88") : char_param1 = X  -  warning ok!
IP3 test: 'char_param1 = 'R'' : char_param1 = R
IP3 test: 'char_param2 = 77' (='M'): char_param2 = M


IP3 test: 'schar_param = 'G'' : schar_param = G
IP3 test: 'schar_param = 78' (='N') : schar_param = N


IP3 test: 'uint_param == uint_param2' (10==20) = false
IP3 test: 'uint_param == uint_param2' (10==10) = true
IP3 test: '10 == uint_param' (10==10) = true
IP3 test: 'uint_param == 10' (10==10) = true
TestIP3::new_param_callback: Callback for NEW PARAMETERS: Parameter IP3.tmp_bool_param, value: 1
IP3 test: 'bool_param == tmp_bool_param' (false==true) = false
IP3 test: 'bool_param == tmp_bool_param' (true==true) = true


TestIP3::config_callback: Callback for changed parameter IP3.int_param. New value: 1234
IP3 test: Api call getValue('IP3.int_param') = 1234  (should be 1234)
IP3 test: Api call getValue('IP3.uint_param') = 5678  (should be 5678)

Warning: IP3.__gcnf_api___0: getPar: ... getting value failed!
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:766
In process: IP3.main_action @ 0 s
IP3 test: Api call getValue('not.existing') returned false as expected
TestIP3::new_param_callback: Callback for NEW PARAMETERS: Parameter IP3.tmp_short_param, value: 0
IP3 test: Api call getValue('IP3.tmp_short_param') = 12  (should be 12)

IP3 test: got parameter 'IP3.int_param' object with call get_gs_param<int>(name), val = 1234

IP3 test: passed test get_gs_param<unsigned int> with wrong type!

IP3 test: passed test get_gs_param<int> with not existing param!


.
@0 s /0 (IPVec): This is the main action in TestIPVec

IPVec test: show vec1: {"without","quotes"}
vector: size=2
without
quotes

IPVec test: show vec2: {"with spaces","within members"}
vector: size=2
with spaces
within members

IPVec test: show vec3: {"with single quotes","within 'this' member","and comma, here"}
vector: size=3
with single quotes
within 'this' member
and comma, here

IPVec test: show vec4: {"without","quotes"}
vector: size=2
without
quotes

IPVec test: show vec5: {"with","quotes in \"this\"."}
vector: size=2
with
quotes in "this".

TestIP3::new_param_callback: Callback for NEW PARAMETERS: Parameter IPVec.no_name_12, value: {}
IPVec test: set vector param to: '{"This", "is the", "simplest", "example"}'
IPVec test:  show vecLocal: {"This","is the","simplest","example"}
vector: size=4
This
is the
simplest
example

IPVec test: set vector param to: '{ "This","is the"   ,   "simplest"    ,    "example"}'
IPVec test:  show vecLocal: {"This","is the","simplest","example"}
vector: size=4
This
is the
simplest
example

IPVec test: set vector param to: '{"example", "with", "quotes \"here\" inside and comma, here", "and single quote 'here" }'
IPVec test:  show vecLocal: {"example","with","quotes \"here\" inside and comma, here","and single quote 'here"}
vector: size=4
example
with
quotes "here" inside and comma, here
and single quote 'here

IPVec test: deserialize -> serialize -> deserialize test: '{"example", "with", "quotes \"here\" inside and comma, here", "and single quote 'here" }'
IPVec test: result:
IPVec test:  show vecLocal: {"example","with","quotes \"here\" inside and comma, here","and single quote 'here"}
vector: size=4
example
with
quotes "here" inside and comma, here
and single quote 'here

event_observer started
.
@0 s /1 (TestTool): This is the main action in TestTool
.
.
.
.
.
.
.
.
@0 s /1 (TestTool): config_callback: Callback for changed parameter IP1.scmlStringParam. New value: TestValue1
@0 s /1 (TestTool): config_callback: Callback for changed parameter IP1.scmlStringParam. New value: TestValue1
.
.
.
.
.
.
@0 s /1 (TestTool): observer_scmethod: observed parameter has changed OR new event was set!
@0 s /1 (TestTool): ***********************************************************************
.
.
@0 s /2 (TestTool): Documentation for parameter IP3.int_param:
Documentation of this parameter: Never set it to a value larger than 10. Simulation will explode.
.
.
TestIP3::config_callback: Callback for changed parameter IP3.int_param. New value: 6666
.
.
@0 s /2 (TestTool): observer_scmethod: observed parameter has changed OR new event was set!
@0 s /2 (TestTool): ***********************************************************************
TestIP3::config_callback: Callback for changed parameter IP3.int_param. New value: 2002
.
.
@0 s /3 (TestTool): observer_scmethod: observed parameter has changed OR new event was set!
@0 s /3 (TestTool): ***********************************************************************
.
.
OK if getting failed!!

.
.
TestIP3::new_param_callback: Callback for NEW PARAMETERS: Parameter IP1.param4NotExisting, value: implicitValue
.
.
.
.
.
.

Warning: TestTool.__tool_gcnf_api___0: BEWARE: ADD must not be used for foreign parameters, only for own one's
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/toolApi/tool_gcnf_api.h:76
In process: TestTool.main_action @ 0 s

Warning: TestTool.__gcnf_api___0: DEPRECATED: addParam is deprecated due to simulation overhead! Use 'setInitValue("par_name", "value")' instead or create a gs_param<type> object.
In file: /Users/schroede/mydev/greensocs_greencontrol/greencontrol/gcnf/apis/GCnf_Api/GCnf_Api_t.h:524
In process: TestTool.main_action @ 0 s
TestIP3::new_param_callback: Callback for NEW PARAMETERS: Parameter IP1.param4NotExisting, value: explicitValue
.
.
Add warning(s) OK!

.
.
.
.
@0 s /4 (TestTool): config_callback: Callback for changed parameter IP2.scmlStringParam. New value: newTestForCallback
@0 s /4 (TestTool): config_callback2: Callback for changed parameter IP2.scmlStringParam. New value: newTestForCallback
@0 s /4 (TestTool): config_callback: Callback for changed parameter IP2.scmlStringParam. New value: newTestForCallback
@0 s /4 (TestTool): config_callback2: Callback for changed parameter IP2.scmlStringParam. New value: newTestForCallback
.
.
.
.
.
.
END of automatic test
.
.
@1 ms /5 (ParamListIP): This is the main action in ParamListIP
Show getParamList(IP1):
vector: size=9
IP1.SUB_IP_2.scmlBoolParam
IP1.SUB_IP_2.scmlDoubleParam
IP1.SUB_IP_2.scmlIntParam
IP1.SUB_IP_2.scmlStringParam
IP1.SUB_IP_2.scmlUIntParam
IP1.implicitParam
IP1.param4NotExisting
IP1.scmlIntParam
IP1.scmlStringParam
Show getParams(IP1):
 IP1.param4NotExisting
 IP1.scmlIntParam
 IP1.scmlStringParam
Show getParamList(IP1.*):
vector: size=9
IP1.SUB_IP_2.scmlBoolParam
IP1.SUB_IP_2.scmlDoubleParam
IP1.SUB_IP_2.scmlIntParam
IP1.SUB_IP_2.scmlStringParam
IP1.SUB_IP_2.scmlUIntParam
IP1.implicitParam
IP1.param4NotExisting
IP1.scmlIntParam
IP1.scmlStringParam
Show getParams(IP1.*):
 IP1.SUB_IP_2.scmlBoolParam
 IP1.SUB_IP_2.scmlDoubleParam
 IP1.SUB_IP_2.scmlIntParam
 IP1.SUB_IP_2.scmlStringParam
 IP1.SUB_IP_2.scmlUIntParam
 IP1.param4NotExisting
 IP1.scmlIntParam
 IP1.scmlStringParam
.
.
.
.
.
@2 ms /6 (AttributeTestsIP): This is the main action in AttributeTestsIP
TestIP3::new_param_callback: Callback for NEW PARAMETERS: Parameter AttributeTestsIP.param, value: 34
AttributeTestsIP test: PASSED: if config attribute added
AttributeTestsIP test: PASSED: if output attribute added
AttributeTestsIP test: PASSED: if temp attribute added
AttributeTestsIP test: PASSED: p.has_param_attribute(gs::cnf::param_attribute::config) returned true.
AttributeTestsIP test: PASSED: p.has_param_attribute(gs::cnf::param_attribute::runtime_config) returned false.
AttributeTestsIP test: PASSED: p.get_all_param_attributes() size = 3 == 3
AttributeTestsIP test: PASSED: Attribute was removed
AttributeTestsIP test: PASSED: output attribute is not set
AttributeTestsIP test: PASSED: p.get_all_param_attributes() size = 2 == 2
AttributeTestsIP test: PASSED: all removed: p.get_all_param_attributes() size = 0 == 0
.
.
.
IP sc_attrib test: Default values: 
IP sc_attrib test:  attrib_paramInt -100
IP sc_attrib test:  attrib_paramUInt 100
IP sc_attrib test:  attrib_paramDouble 10.1
IP sc_attrib test: attrib_paramString Init test string

IP sc_attrib test: uintattr = 100

IP sc_attrib test: Set attrib_paramInt.value = 5
IP sc_attrib test:     attrib_paramInt.value = 5

IP sc_attrib test: attrib_paramDouble.value = 10.1

IP sc_attrib test: stringattr = Init test string

IP sc_attrib test: Set attrib_paramString.value = 'Hello'
IP sc_attrib test:     attrib_paramString.value = Hello

IP sc_attrib test: attrib_paramString.value = Hello


IP sc_event test: Default value: 
IP sc_event test:  event_param 



END SIMULATION
Parameter list:
vector: size=114
AttributeTestsIP.param
ConfigFileMacroIP.param1
ConfigFileMacroIP.param2
ConfigFileMacroIP.param3
ConfigFileMacroIP.param4
IP1.SUB_IP_2.scmlBoolParam
IP1.SUB_IP_2.scmlDoubleParam
IP1.SUB_IP_2.scmlIntParam
IP1.SUB_IP_2.scmlStringParam
IP1.SUB_IP_2.scmlUIntParam
IP1.implicitParam
IP1.param4NotExisting
IP1.scmlIntParam
IP1.scmlStringParam
IP2.anotherTabImplParam4
IP2.anotherTabImplicParam2
IP2.anotherTabImplicParam3
IP2.anotherTabImplicitParam1
IP2.implicitParam
IP2.scmlBoolParam
IP2.scmlDoubleParam
IP2.scmlIntParam
IP2.scmlStringParam
IP2.scmlUIntParam
IP2.zw.implicitFirstParam
IP3.Test.newParam
IP3.TestArray
IP3.TestArray.TestParam
IP3.TestArray.no_name_1
IP3.TestArray.no_name_2
IP3.TestArray.no_name_4
IP3.TestArray.no_name_5
IP3.TestParam
IP3.TestParam.0
IP3.TestParam.1
IP3.TestParam.2
IP3.TestParam.3
IP3.TestParam.4
IP3.TestParentArray
IP3.TestParentArray.TestParam
IP3.TestParentArray.TestParam.0
IP3.TestParentArray.TestParam.1
IP3.TestParentArray.TestParam.2
IP3.TestParentArray.TestParam.3
IP3.TestParentArray.TestParam.4
IP3.TestParentArray.no_name_11
IP3.TestParentArray.no_name_7
IP3.TestParentArray.no_name_8
IP3.TestParentArray.no_name_9
IP3.bool_param
IP3.char_param1
IP3.char_param2
IP3.char_param3
IP3.dbl_param
IP3.float_param
IP3.int_param
IP3.ll_par
IP3.local_int
IP3.no_name_0
IP3.no_name_10
IP3.no_name_3
IP3.no_name_6
IP3.sc_bigint_param
IP3.sc_biguint_param
IP3.sc_bit_param
IP3.sc_bit_param2
IP3.sc_bv_param
IP3.sc_fix_param
IP3.sc_fixed_param
IP3.sc_int_param
IP3.sc_logic_param
IP3.sc_lv_param
IP3.sc_ufix_param
IP3.sc_ufixed_param
IP3.sc_uint_param
IP3.schar_param
IP3.short_param
IP3.str_param
IP3.str_param2
IP3.time_param1
IP3.time_param2
IP3.time_param3
IP3.tmp_bool_param
IP3.tmp_short_param
IP3.uchar_param
IP3.uint_param
IP3.uint_param2
IP3.ul1_par
IP3.ul2_par
IP3.ull2_par
IP3.ull3_par
IP3.ull4_par
IP3.ull_par
IP3.ulong_param
IP3.ulonglong_param
IP3.ushort_param
IPVec.no_name_12
IPVec.vec1
IPVec.vec2
IPVec.vec3
IPVec.vec4
IPVec.vec5
TestParam
Toplevel_Param_Tests
addedTopLevelParam
notYetExisting
sc_attrib_IP.attrib_paramDouble
sc_attrib_IP.attrib_paramInt
sc_attrib_IP.attrib_paramString
sc_attrib_IP.attrib_paramUInt
sc_event_IP.event_param
tmpTopLevelParam
topLevelParam
toplevel.sub.topLevelParam2

Info: (I804) /IEEE_Std_1666/deprecated: You can turn off warnings about
             IEEE 1666 deprecated features by placing this method call as the
             first statement in your sc_main() function:

  sc_report_handler::set_actions("/IEEE_Std_1666/deprecated", SC_DO_NOTHING);


